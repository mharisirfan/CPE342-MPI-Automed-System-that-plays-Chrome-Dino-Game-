
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000158  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001dc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000082c  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000070f  00000000  00000000  00000a78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002f5  00000000  00000000  00001187  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  0000147c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000438  00000000  00000000  000014c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000e6  00000000  00000000  000018f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000019de  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 5c 00 	call	0xb8	; 0xb8 <main>
  78:	0c 94 aa 00 	jmp	0x154	; 0x154 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <_Z8adc_initv>:
}

void adc_init()
{
	// AREF = AVcc
	ADMUX = (1<<REFS0);
  80:	80 e4       	ldi	r24, 0x40	; 64
  82:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	
	// ADC Enable and prescaler of 128
	// 16000000/128 = 125000
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  86:	87 e8       	ldi	r24, 0x87	; 135
  88:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  8c:	08 95       	ret

0000008e <_Z8adc_readh>:
uint16_t adc_read(uint8_t ch)
{
	// select the corresponding channel 0~7
	// ANDing with '7' will always keep the value
	// of 'ch' between 0 and 7
	ch &= 0b00000111;  // AND operation with 7
  8e:	87 70       	andi	r24, 0x07	; 7
	ADMUX = (ADMUX & 0xF8)|ch;     // clears the bottom 3 bits before ORing
  90:	ec e7       	ldi	r30, 0x7C	; 124
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	90 81       	ld	r25, Z
  96:	98 7f       	andi	r25, 0xF8	; 248
  98:	89 2b       	or	r24, r25
  9a:	80 83       	st	Z, r24
	
	// start single conversion
	// write '1' to ADSC
	ADCSRA |= (1<<ADSC);
  9c:	ea e7       	ldi	r30, 0x7A	; 122
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	80 81       	ld	r24, Z
  a2:	80 64       	ori	r24, 0x40	; 64
  a4:	80 83       	st	Z, r24
	
	// wait for conversion to complete
	// ADSC becomes '0' again
	// till then, run loop continuously
	while(ADCSRA & (1<<ADSC));
  a6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  aa:	86 fd       	sbrc	r24, 6
  ac:	fc cf       	rjmp	.-8      	; 0xa6 <_Z8adc_readh+0x18>
	
	return (ADC);
  ae:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  b2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  b6:	08 95       	ret

000000b8 <main>:

int main(void)
{
	char int_buffer[10];
	//DDRC = 0x01;
	DDRB= 0xff;
  b8:	8f ef       	ldi	r24, 0xFF	; 255
  ba:	84 b9       	out	0x04, r24	; 4
	adc_init();
  bc:	0e 94 40 00 	call	0x80	; 0x80 <_Z8adc_initv>
	DDRB |= 1 << PINB1;
  c0:	84 b1       	in	r24, 0x04	; 4
  c2:	82 60       	ori	r24, 0x02	; 2
  c4:	84 b9       	out	0x04, r24	; 4
	
	/* 1. Set Fast PWM mode 14: set WGM11, WGM12, WGM13 to 1 */
	/* 3. Set pre-scaler of 8 */
	/* 4. Set Fast PWM non-inverting mode */
	TCCR1A |= (1 << WGM11) | (1 << COM1A1);
  c6:	e0 e8       	ldi	r30, 0x80	; 128
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 81       	ld	r24, Z
  cc:	82 68       	ori	r24, 0x82	; 130
  ce:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12) | (1 << WGM13) | (1 << CS11);
  d0:	e1 e8       	ldi	r30, 0x81	; 129
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	8a 61       	ori	r24, 0x1A	; 26
  d8:	80 83       	st	Z, r24

	/* 2. Set ICR1 register: PWM period */
	ICR1 = 39999;
  da:	8f e3       	ldi	r24, 0x3F	; 63
  dc:	9c e9       	ldi	r25, 0x9C	; 156
  de:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
  e2:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	uint16_t ADC_RawData = 0x0000;

	while (1)
	{
		/* Read ADC Value at Pin PC0 (A0/ADC0) */
		ADC_RawData = adc_read(0);
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	0e 94 47 00 	call	0x8e	; 0x8e <_Z8adc_readh>
		
		if (ADC_RawData > 400)
  ec:	81 39       	cpi	r24, 0x91	; 145
  ee:	91 40       	sbci	r25, 0x01	; 1
  f0:	00 f1       	brcs	.+64     	; 0x132 <main+0x7a>
		{
			
			PORTB |= (1<<PB0);
  f2:	85 b1       	in	r24, 0x05	; 5
  f4:	81 60       	ori	r24, 0x01	; 1
  f6:	85 b9       	out	0x05, r24	; 5
			OCR1A = 1900;	/* Set servo shaft at 90° position */
  f8:	e8 e8       	ldi	r30, 0x88	; 136
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	8c e6       	ldi	r24, 0x6C	; 108
  fe:	97 e0       	ldi	r25, 0x07	; 7
 100:	91 83       	std	Z+1, r25	; 0x01
 102:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 104:	8f e3       	ldi	r24, 0x3F	; 63
 106:	92 e4       	ldi	r25, 0x42	; 66
 108:	2f e0       	ldi	r18, 0x0F	; 15
 10a:	81 50       	subi	r24, 0x01	; 1
 10c:	90 40       	sbci	r25, 0x00	; 0
 10e:	20 40       	sbci	r18, 0x00	; 0
 110:	e1 f7       	brne	.-8      	; 0x10a <main+0x52>
 112:	00 c0       	rjmp	.+0      	; 0x114 <main+0x5c>
 114:	00 00       	nop
			_delay_ms(5000);
			OCR1A = 3999;	/* Set servo shaft at 90° position */
 116:	8f e9       	ldi	r24, 0x9F	; 159
 118:	9f e0       	ldi	r25, 0x0F	; 15
 11a:	91 83       	std	Z+1, r25	; 0x01
 11c:	80 83       	st	Z, r24
 11e:	8f e3       	ldi	r24, 0x3F	; 63
 120:	92 e4       	ldi	r25, 0x42	; 66
 122:	2f e0       	ldi	r18, 0x0F	; 15
 124:	81 50       	subi	r24, 0x01	; 1
 126:	90 40       	sbci	r25, 0x00	; 0
 128:	20 40       	sbci	r18, 0x00	; 0
 12a:	e1 f7       	brne	.-8      	; 0x124 <main+0x6c>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <main+0x76>
 12e:	00 00       	nop
 130:	da cf       	rjmp	.-76     	; 0xe6 <main+0x2e>
			
			
		}
		else
		{
			PORTB &= ~(1<<PB0);
 132:	85 b1       	in	r24, 0x05	; 5
 134:	8e 7f       	andi	r24, 0xFE	; 254
 136:	85 b9       	out	0x05, r24	; 5
			OCR1A = 0;	/* Set servo shaft at 0° position */
 138:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 13c:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 140:	8f e9       	ldi	r24, 0x9F	; 159
 142:	96 e8       	ldi	r25, 0x86	; 134
 144:	21 e0       	ldi	r18, 0x01	; 1
 146:	81 50       	subi	r24, 0x01	; 1
 148:	90 40       	sbci	r25, 0x00	; 0
 14a:	20 40       	sbci	r18, 0x00	; 0
 14c:	e1 f7       	brne	.-8      	; 0x146 <main+0x8e>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <main+0x98>
 150:	00 00       	nop
 152:	c9 cf       	rjmp	.-110    	; 0xe6 <main+0x2e>

00000154 <_exit>:
 154:	f8 94       	cli

00000156 <__stop_program>:
 156:	ff cf       	rjmp	.-2      	; 0x156 <__stop_program>
